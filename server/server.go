// Package server provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package server

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Return Links shortened by the service// (GET /links)
	GetLinks(ctx echo.Context) error
	// Shorten url// (POST /links)
	StoreLink(ctx echo.Context) error
	// Delete Link// (DELETE /links/{code})
	DeleteLink(ctx echo.Context, code string) error
	// Return shortened url// (GET /links/{code})
	GetLink(ctx echo.Context, code string) error
	// Increment hits counter// (PATCH /links/{code})
	IncrementHitsCounter(ctx echo.Context, code string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetLinks converts echo context to params.
func (w *ServerInterfaceWrapper) GetLinks(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLinks(ctx)
	return err
}

// StoreLink converts echo context to params.
func (w *ServerInterfaceWrapper) StoreLink(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.StoreLink(ctx)
	return err
}

// DeleteLink converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameter("simple", false, "code", ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteLink(ctx, code)
	return err
}

// GetLink converts echo context to params.
func (w *ServerInterfaceWrapper) GetLink(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameter("simple", false, "code", ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetLink(ctx, code)
	return err
}

// IncrementHitsCounter converts echo context to params.
func (w *ServerInterfaceWrapper) IncrementHitsCounter(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "code" -------------
	var code string

	err = runtime.BindStyledParameter("simple", false, "code", ctx.Param("code"), &code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.IncrementHitsCounter(ctx, code)
	return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET("/links", wrapper.GetLinks)
	router.POST("/links", wrapper.StoreLink)
	router.DELETE("/links/:code", wrapper.DeleteLink)
	router.GET("/links/:code", wrapper.GetLink)
	router.PATCH("/links/:code", wrapper.IncrementHitsCounter)

}
