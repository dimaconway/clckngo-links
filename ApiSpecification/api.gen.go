// Package ApiSpecification provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package ApiSpecification

import (
    "fmt"
    "net/http"
    "time"

    "github.com/deepmap/oapi-codegen/pkg/runtime"
    "github.com/labstack/echo/v4"
)

// Link defines model for Link.
type Link struct {
    CreatedDatetime time.Time `json:"createdDatetime"`
    Hash            string    `json:"hash"`
    Hits            int       `json:"hits"`
    Id              string    `json:"id"`
    LastHitDatetime time.Time `json:"lastHitDatetime"`
    Url             string    `json:"url"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
    // Return Links shortened by the service// (GET /links)
    GetLinks(ctx echo.Context) error
    // Shorten url// (POST /links)
    StoreLink(ctx echo.Context) error
    // Delete Link// (DELETE /links/{hash})
    DeleteLink(ctx echo.Context, hash string) error
    // Return shortened url// (GET /links/{hash})
    GetLink(ctx echo.Context, hash string) error
    // Increment hits counter// (PATCH /links/{hash})
    IncrementHitsCounter(ctx echo.Context, hash string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
    Handler ServerInterface
}

// GetLinks converts echo context to params.
func (w *ServerInterfaceWrapper) GetLinks(ctx echo.Context) error {
    var err error

    // Invoke the callback with all the unmarshalled arguments
    err = w.Handler.GetLinks(ctx)
    return err
}

// StoreLink converts echo context to params.
func (w *ServerInterfaceWrapper) StoreLink(ctx echo.Context) error {
    var err error

    // Invoke the callback with all the unmarshalled arguments
    err = w.Handler.StoreLink(ctx)
    return err
}

// DeleteLink converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteLink(ctx echo.Context) error {
    var err error
    // ------------- Path parameter "hash" -------------
    var hash string

    err = runtime.BindStyledParameter("simple", false, "hash", ctx.Param("hash"), &hash)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
    }

    // Invoke the callback with all the unmarshalled arguments
    err = w.Handler.DeleteLink(ctx, hash)
    return err
}

// GetLink converts echo context to params.
func (w *ServerInterfaceWrapper) GetLink(ctx echo.Context) error {
    var err error
    // ------------- Path parameter "hash" -------------
    var hash string

    err = runtime.BindStyledParameter("simple", false, "hash", ctx.Param("hash"), &hash)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
    }

    // Invoke the callback with all the unmarshalled arguments
    err = w.Handler.GetLink(ctx, hash)
    return err
}

// IncrementHitsCounter converts echo context to params.
func (w *ServerInterfaceWrapper) IncrementHitsCounter(ctx echo.Context) error {
    var err error
    // ------------- Path parameter "hash" -------------
    var hash string

    err = runtime.BindStyledParameter("simple", false, "hash", ctx.Param("hash"), &hash)
    if err != nil {
        return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hash: %s", err))
    }

    // Invoke the callback with all the unmarshalled arguments
    err = w.Handler.IncrementHitsCounter(ctx, hash)
    return err
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router runtime.EchoRouter, si ServerInterface) {

    wrapper := ServerInterfaceWrapper{
        Handler: si,
    }

    router.GET("/links", wrapper.GetLinks)
    router.POST("/links", wrapper.StoreLink)
    router.DELETE("/links/:hash", wrapper.DeleteLink)
    router.GET("/links/:hash", wrapper.GetLink)
    router.PATCH("/links/:hash", wrapper.IncrementHitsCounter)

}
